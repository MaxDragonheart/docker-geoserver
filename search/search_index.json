{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Geoserver Docker Image # Geoserver\u2019s version 2.20.1, that runs on port 8300 as default with minimum 2GB and maximum 4GB of RAM. Version tagged low_cost_server has minimum 512MB and maximum 2GB of RAM. Credentials # Username: admin Password: geoserver Pre-installed extensions # GDAL Importer JP2K Plugin Monitoring Cross-layer filtering Vector Tiles Web Coverage Service 2.0 Earth Observation extensions WMTS Multidimensional INSPIRE Run project # Use .env to customize your version: GS_VERSION=2.20.1 GS_HTTP_PORT=8300 GS_INITIAL_MEMORY=1G GS_MAXIMUM_MEMORY=4G Build: docker-compose -f docker-compose.yml up -d --build Official Geoserver Documentation # Extensions list Running in a production environment GeoServer data directory","title":"Home"},{"location":"#geoserver-docker-image","text":"Geoserver\u2019s version 2.20.1, that runs on port 8300 as default with minimum 2GB and maximum 4GB of RAM. Version tagged low_cost_server has minimum 512MB and maximum 2GB of RAM.","title":"Geoserver Docker Image"},{"location":"#credentials","text":"Username: admin Password: geoserver","title":"Credentials"},{"location":"#pre-installed-extensions","text":"GDAL Importer JP2K Plugin Monitoring Cross-layer filtering Vector Tiles Web Coverage Service 2.0 Earth Observation extensions WMTS Multidimensional INSPIRE","title":"Pre-installed extensions"},{"location":"#run-project","text":"Use .env to customize your version: GS_VERSION=2.20.1 GS_HTTP_PORT=8300 GS_INITIAL_MEMORY=1G GS_MAXIMUM_MEMORY=4G Build: docker-compose -f docker-compose.yml up -d --build","title":"Run project"},{"location":"#official-geoserver-documentation","text":"Extensions list Running in a production environment GeoServer data directory","title":"Official Geoserver Documentation"},{"location":"guides/dockerhub/","text":"Docker Hub # Push new images # Build: docker build -t maxdragonheart/geoserver:<TAG> . Push: docker push maxdragonheart/geoserver:<TAG> Rename image\u2019s TAG to latest # Rename: docker tag maxdragonheart/geoserver:<TAG> maxdragonheart/geoserver:latest Push: docker push maxdragonheart/geoserver:latest","title":"Development"},{"location":"guides/dockerhub/#docker-hub","text":"","title":"Docker Hub"},{"location":"guides/dockerhub/#push-new-images","text":"Build: docker build -t maxdragonheart/geoserver:<TAG> . Push: docker push maxdragonheart/geoserver:<TAG>","title":"Push new images"},{"location":"guides/dockerhub/#rename-images-tag-to-latest","text":"Rename: docker tag maxdragonheart/geoserver:<TAG> maxdragonheart/geoserver:latest Push: docker push maxdragonheart/geoserver:latest","title":"Rename image's TAG to latest"},{"location":"guides/geoserver-extension/","text":"Geoserver Extensions # Pre-installed extensions # GDAL Importer JP2K Plugin Monitoring Cross-layer filtering Vector Tiles Web Coverage Service 2.0 Earth Observation extensions WMTS Multidimensional INSPIRE Install another extension # Put down Geoserver: docker-compose -f docker-compose-dev.yml down Copy .jar into plugin\u2019s folder: cp -R DOWNLOAD_FOLDER/* /var/lib/docker/volumes/geoserver-drako_geoserver-plugin/_data/lib Change lib ownership: chown -R USERNAME:USERNAME lib/ Put UP Geoserver: docker-compose -f docker-compose-dev.yml up -d","title":"Extensions"},{"location":"guides/geoserver-extension/#geoserver-extensions","text":"","title":"Geoserver Extensions"},{"location":"guides/geoserver-extension/#pre-installed-extensions","text":"GDAL Importer JP2K Plugin Monitoring Cross-layer filtering Vector Tiles Web Coverage Service 2.0 Earth Observation extensions WMTS Multidimensional INSPIRE","title":"Pre-installed extensions"},{"location":"guides/geoserver-extension/#install-another-extension","text":"Put down Geoserver: docker-compose -f docker-compose-dev.yml down Copy .jar into plugin\u2019s folder: cp -R DOWNLOAD_FOLDER/* /var/lib/docker/volumes/geoserver-drako_geoserver-plugin/_data/lib Change lib ownership: chown -R USERNAME:USERNAME lib/ Put UP Geoserver: docker-compose -f docker-compose-dev.yml up -d","title":"Install another extension"},{"location":"guides/manage-datadir/","text":"Use earlier folder # Put down Geoserver: docker-compose -f docker-compose.yml down Delete datadir : rm -rf /var/lib/docker/volumes/geoserver-drako_geoserver/_data/data Create datadir : mkdir data Copy all data from earlier folder to datadir : cp -r EARLIER_FOLDER_NAME/* /var/lib/docker/volumes/geoserver-drako_geoserver/_data/data Change datadir ownership: chown -R USERNAME:USERNAME datadir/ Put UP Geoserver: docker-compose -f docker-compose.yml up -d","title":"Manage datadir"},{"location":"guides/manage-datadir/#use-earlier-folder","text":"Put down Geoserver: docker-compose -f docker-compose.yml down Delete datadir : rm -rf /var/lib/docker/volumes/geoserver-drako_geoserver/_data/data Create datadir : mkdir data Copy all data from earlier folder to datadir : cp -r EARLIER_FOLDER_NAME/* /var/lib/docker/volumes/geoserver-drako_geoserver/_data/data Change datadir ownership: chown -R USERNAME:USERNAME datadir/ Put UP Geoserver: docker-compose -f docker-compose.yml up -d","title":"Use earlier folder"},{"location":"guides/nginx-certbot/","text":"NGINX-Certbot # If Apache2 is up, it\u2019s necessary to put it down. Check Apache2 status: sudo systemctl status apache2 Stop Apache2: sudo systemctl stop apache2 Create an SSL certificate with Certbot # Enter to the image that use nginx: docker exec -it <nginx_img_id> bin/bash Make certificate: certbot --nginx -d domain.com -d www.domain.com Put down Geoserver and NGINX, then edit WEB-INF/web.xml . Uncomment PROXY_BASE_URL and add your domain: https://example.com/geoserver . Uncomment GEOSERVER_CSRF_WHITELIST and add your domain without http: example.com . Put up Geoserver and NGINX, go to example.com Renew SSL certificate # LetsEncrypt will only allow renewal when the certificate is within 30 days of expiry. Once renewed the new certificate will be valid for 90 days from the date of renewal. certbot renew --nginx","title":"NGINX-Certbot"},{"location":"guides/nginx-certbot/#nginx-certbot","text":"If Apache2 is up, it\u2019s necessary to put it down. Check Apache2 status: sudo systemctl status apache2 Stop Apache2: sudo systemctl stop apache2","title":"NGINX-Certbot"},{"location":"guides/nginx-certbot/#create-an-ssl-certificate-with-certbot","text":"Enter to the image that use nginx: docker exec -it <nginx_img_id> bin/bash Make certificate: certbot --nginx -d domain.com -d www.domain.com Put down Geoserver and NGINX, then edit WEB-INF/web.xml . Uncomment PROXY_BASE_URL and add your domain: https://example.com/geoserver . Uncomment GEOSERVER_CSRF_WHITELIST and add your domain without http: example.com . Put up Geoserver and NGINX, go to example.com","title":"Create an SSL certificate with Certbot"},{"location":"guides/nginx-certbot/#renew-ssl-certificate","text":"LetsEncrypt will only allow renewal when the certificate is within 30 days of expiry. Once renewed the new certificate will be valid for 90 days from the date of renewal. certbot renew --nginx","title":"Renew SSL certificate"}]}